#!/usr/bin/env python
# -*-python-*-

import sys
import os
import logging

import optparse
import ConfigParser

whoami = os.path.abspath(sys.argv[0])
scripts = os.path.dirname(whoami)
root = os.path.dirname(scripts)
sys.path.append(root)

import flamework.deploy

if __name__ == '__main__':

       opt_parser = optparse.OptionParser()

       opt_parser.add_option('-a', '--appname', dest='appname', action='store', default=None, help='...')
       opt_parser.add_option('-c', '--config', dest='config', action='store', default=None, help='Path to a valid deploy config file')
       opt_parser.add_option('-n', '--dry-run', dest='dryrun', action='store_true', default=False, help='...')
       opt_parser.add_option('-v', '--verbose', dest='verbose', action='store_true', default=False, help='Be chatty (default is false)')

       options, args = opt_parser.parse_args()
       
       if options.verbose:
              logging.basicConfig(level=logging.DEBUG)
       else:
              logging.basicConfig(level=logging.INFO)
              
       if not options.appname:
              logging.error("Missing app name")
              sys.exit(1)

       if not options.config:
              logging.error("Missing config file")
              sys.exit(1)

       if not os.path.exists(options.config):
              logging.error("Can't find config file")
              sys.exit(1)

       if len(args) == 0:
              logging.error("Missing command")
              sys.exit(1)

       cfg = ConfigParser.ConfigParser()
       cfg.read(options.config)

       d = flamework.deploy.base(options.appname, cfg, dryrun=options.dryrun)
   
       # logging.info("myles is ready to dive")

       command = args[0]

       if command == "stage-site":

              d.stage_site()
       
       elif command == "deploy-site":

              d.deploy_site()

       elif command == "deploy-config":

              pass

       elif command == "enable-site":

              if len(args) != 2:
                     logging.error("You forget to include a host to enable")
                     sys.exit(1)

              host = args[1]

              if not d.is_valid_host(host):
                     logging.error("%s is not a host Myles knows about")
                     sys.exit(1)

              if d.is_host_enabled(host):
                     logging.info("%s is already enabled" % host)
                     sys.exit(0)

              if not d.enable_host(host):
                     logging.error("failed to enable host %s" % host)
                     sys.exit(1)

              if not d.is_host_enabled(host):
                     logging.error("enabling %s appeared to succeed but it is still not enabled" % host)
                     sys.exit(1)

              logging.info("%s is enabled" %host)

       elif command == "disable-site":

              if len(args) != 2:
                     logging.error("You forget to include a host to disable")
                     sys.exit(1)

              host = args[1]

              if not d.is_valid_host(host):
                     logging.error("%s is not a host Myles knows about")
                     sys.exit(1)

              if d.is_host_disabled(host):
                     logging.info("%s is already disabled" % host)
                     sys.exit(0)

              if not d.disable_host(host):
                     logging.error("failed to disable %s" % host)
                     sys.exit(1)

              if not d.is_host_disabled(host):
                     logging.error("disabling %s appeared to succeed but it is still not (properly) disabled")
                     sys.exit(1)

              logging.info("%s is now disabled" % host)

       elif command == "status":
              
              for host in d.hosts():

                     if d.is_host_enabled(host):
                            logging.info("%s is UP" % host)
                     else:
                            logging.warning("%s is DOWN" % host)

       else:

              logging.error("Unknown command")
              sys.exit(1)

